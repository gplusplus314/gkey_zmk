/*
 * Copyright (c) 2021 The ZMK Contributors
 *
 * SPDX-License-Identifier: MIT
 *
 */

#include <behaviors.dtsi>
#include <dt-bindings/zmk/bt.h>
#include <dt-bindings/zmk/keys.h>
#include <dt-bindings/zmk/outputs.h>

// Global Settings {{{
&sl {
  release-after-ms = <1000>;
};
//}}}

// Layer Indices {{{
#define L_BASE    0
#define L_GAME1   1
#define L_GAME2   2
#define L_NAVSYM  3
#define L_DUAL    4
#define L_STNGS   5
#define L_TRANS   6

#define ALPHA_LAYERS L_BASE
#define TYPING_LAYERS ALPHA_LAYERS L_NAVSYM
#define GAMING_LAYERS L_GAME1 L_GAME2
#define RIGHT_HAND_LAYERS TYPING_LAYERS GAMING_LAYERS
//}}}

// High level key definitions {{{

// Left home row {{{
// base layer
#define G_A     &lsft LSHFT        A
#define G_R     &lhrm LALT         R
#define G_S     &lhrm LGUI         S
#define G_T     &lhrm LCTRL        T
// navsym layer
#define G_DOT   &lsft LSHFT        DOT
//}}}

// Right home row mods {{{
// base layer
#define G_N     &rhrm RCTRL        N
#define G_E     &rhrm RGUI         E
#define G_I     &rhrm RALT         I
#define G_O     &rsft RSHFT        O
// navsym layer
#define G_N0    &rsft RSHFT        N0
//}}}

// Left thumb {{{
#define G_SPC  &kp     SPC
#define G_ESC  &tlt    L_NAVSYM       ESC
//}}}

// Right thumb {{{
#define G_RET   &tm  LSHFT    RET
#define G_BSPC  &tlt L_NAVSYM BSPC
//}}}

// Dual thumb combo
#define G_DUAL &mo L_DUAL

//}}}

/ {
    /*                   KEY POSITIONS
    ╭────────────────────────╮  ╭────────────────────────╮
    │  0   1   2   3   4     │  │      5   6   7   8   9 │
    │ 10  11  12  13  14     │  │     15  16  17  18  19 │
    │ 20  21  22  23  24     │  │     25  26  27  28  29 │
    ╰───────────╮ 30  31  32 │  │ 33  34  35 ╭───────────╯
                ╰────────────╯  ╰────────────╯            */
    #define KEYS_LFINGERS 0 1 2 3 4 10 11 12 13 14 20 21 22 23 24
    #define KEYS_RFINGERS 5 6 7 8 9 15 16 17 18 19 25 26 27 28 29
    #define KEYS_LTHUMBS 30 31 32
    #define KEYS_RTHUMBS 33 34 35
    #define KEYS_THUMBS KEYS_LTHUMBS KEYS_RTHUMBS

    // Combos {{{
    combos {
      compatible = "zmk,combos";

      // Combo definition macro {{{
      #define COMBO(NAME, BINDINGS, KEYPOS, TIMEOUT, LAYERS) \
      combo_##NAME { \
        timeout-ms = <TIMEOUT>; \
        bindings = <BINDINGS>; \
        key-positions = <KEYPOS>; \
        layers = <LAYERS>; \
      };
      //}}}

      // Intentionally out-of-the-way settings layer.
      COMBO(settings, &sl L_STNGS, 6 7 8 9, 35, TYPING_LAYERS)

      // Both left thumb buttons
      COMBO(dual_l, G_DUAL, 31 32, 35, TYPING_LAYERS)

      // Use most comfortable combo for most frequent non-alpha chars:
      COMBO(tab, &kp TAB, 12 13, 25, TYPING_LAYERS)
      COMBO(semi, &kp SEMI, 16 17, 25, RIGHT_HAND_LAYERS)

      // Put - and = on easy, combos
      COMBO(minus_l, &kp MINUS, 11 12, 25, TYPING_LAYERS)
      COMBO(equal_r, &kp EQUAL, 17 18, 25, RIGHT_HAND_LAYERS)

      // Shortcut to brackets:
      COMBO(lbkt, &kp LBKT   , 2 12, 25, TYPING_LAYERS)
      COMBO(lprn, &st LS(N9), 3 13, 25, TYPING_LAYERS)
      COMBO(rprn, &st LS(N0), 6 16, 25, RIGHT_HAND_LAYERS)
      COMBO(rbkt, &kp RBKT   , 7 17, 25, RIGHT_HAND_LAYERS)
      
      // Alternate 'O' for ALL CAPS TYPING USING RIGHT PINKY AS SHIFT
      COMBO(alt_o, &kp O, 21 22, 25, TYPING_LAYERS)
    };
    //}}}

    // Behaviors {{{
    behaviors {
      lhrm: left_home_row_mod {
        compatible = "zmk,behavior-hold-tap";
        #binding-cells = <2>;
        flavor = "balanced";
        tapping-term-ms = <280>;
        quick-tap-ms = <150>;
        require-prior-idle-ms = <175>;
        bindings = <&kp>, <&kp>;
        hold-trigger-key-positions = <KEYS_RFINGERS KEYS_RTHUMBS>;
        hold-trigger-on-release;
        idle-trigger-key-codes = < SPACE DOT COMMA BSPC DELETE >;
      };

      rhrm: right_home_row_mod {
        compatible = "zmk,behavior-hold-tap";
        #binding-cells = <2>;
        flavor = "balanced";
        tapping-term-ms = <280>;
        quick-tap-ms = <150>;
        require-prior-idle-ms = <175>;
        bindings = <&kp>, <&kp>;
        hold-trigger-key-positions = <KEYS_LFINGERS KEYS_LTHUMBS>;
        hold-trigger-on-release;
        idle-trigger-key-codes = < SPACE DOT COMMA BSPC DELETE >;
      };

      lsft: left_home_shift {
        compatible = "zmk,behavior-hold-tap";
        #binding-cells = <2>;
        flavor = "balanced";
        tapping-term-ms = <150>;
        quick-tap-ms = <150>;
        bindings = <&kp>, <&kp>;
        hold-trigger-key-positions = <KEYS_RFINGERS KEYS_RTHUMBS>;
        hold-trigger-on-release;
      };

      rsft: right_home_shift {
        compatible = "zmk,behavior-hold-tap";
        #binding-cells = <2>;
        flavor = "balanced";
        tapping-term-ms = <150>;
        quick-tap-ms = <150>;
        bindings = <&kp>, <&kp>;
        hold-trigger-key-positions = <KEYS_LFINGERS KEYS_LTHUMBS>;
        hold-trigger-on-release;
      };

      tm: thumb_mod {
        compatible = "zmk,behavior-hold-tap";
        #binding-cells = <2>;
        flavor = "hold-preferred";
        tapping-term-ms = <135>;
        quick-tap-ms = <150>;
        bindings = <&kp>, <&kp>;
      };

      tlt: thumb_layer_tap {
        compatible = "zmk,behavior-hold-tap";
        #binding-cells = <2>;
        flavor = "balanced";
        tapping-term-ms = <150>;
        quick-tap-ms = <150>;
        bindings = <&mo>, <&kp>;
      };

      st: shifted_tap {
        compatible = "zmk,behavior-macro-one-param";
        #binding-cells = <1>;
        bindings = <&macro_param_1to1>, <&macro_tap &kp MACRO_PLACEHOLDER>;
      };
    };
    //}}}

  // Layers {{{
	keymap {
		compatible = "zmk,keymap";

		base_layer {
			bindings = <
        &kp Q         &kp W         &kp F         &kp P           &kp B         /*& &*/     &kp J               &kp L            &kp U              &kp Y         &kp SQT 
        G_A           G_R           G_S           G_T             &kp G         /*& &*/     &kp M               G_N              G_E                G_I           G_O  
        &kp Z         &kp X         &kp C         &kp D           &kp V         /*& &*/     &kp K               &kp H            &kp COMMA          &kp DOT       &kp FSLH
                                        &tog L_GAME1  G_SPC           G_ESC     /*& &*/ G_RET          G_BSPC           &trans
			>;
		};

		game1_layer {
			bindings = <
        &kp Q          &kp W         &kp F         &kp P           &kp B         /*& &*/     &trans              &trans           &trans         &trans        &trans 
        &kp A          &kp R         &kp S         &kp T           &kp G         /*& &*/     &trans              &trans           &trans         &trans        &trans 
        &kp Z          &kp X         &kp C         &kp D           &kp V         /*& &*/     &trans              &trans           &trans         &trans        &trans 
                                &tlt L_GAME2 DOT       &kp SPC         &kp LCTRL /*& &*/ &trans         &trans           &tog L_GAME1                                       
			>;
		};

		game2_layer {
			bindings = <
        &kp ESC      &kp N6        &kp N5        &kp N4          &kp PG_UP     /*& &*/     &trans              &trans           &trans         &trans        &trans
        &kp N0       &kp N3        &kp N2        &kp N1          &kp PG_DN     /*& &*/     &trans              &trans           &trans         &trans        &trans
        &kp HOME     &kp N9        &kp N8        &kp N7          &kp TAB       /*& &*/     &trans              &trans           &trans         &trans        &trans
                                       &trans        &trans          &trans    /*& &*/ &trans         &trans           &trans
			>;
		};

		navsym_layer {
			bindings = <
        &kp DEL      &kp HOME      &kp UP       &kp END          &kp PG_UP           /*& &*/      &kp SEMI            &kp N4           &kp N5         &kp N6        &kp BSLH
        G_DOT        &kp LEFT      &kp DOWN     &kp RIGHT        &kp PG_DN           /*& &*/      &kp GRAVE           &kp N1           &kp N2         &kp N3        G_N0  
        &kp COMMA    &kp MINUS     &kp LBKT     &kp RBKT         &kp EQUAL           /*& &*/      &kp SQT             &kp N7           &kp N8         &kp N9        &trans  
                                       &trans        &trans          &trans          /*& &*/ &trans            &trans            &trans
			>;
		};

		dualthumb_layer {
			bindings = <
			  &kp F8       &trans        &kp C_BRI_DN  &kp C_BRI_UP     &kp K_PP     /*& &*/    &trans             &kp F4            &kp F5            &kp F6        &kp F11         
        &kp F9       &trans        &kp K_VOL_DN  &kp K_VOL_UP     &kp K_MUTE   /*& &*/    &trans             &kp F1            &kp F2            &kp F3        &kp F10      
        &trans       &trans        &trans        &trans           &trans       /*& &*/    &trans             &kp F7            &kp F8            &kp F9        &kp F12           
                                       &trans        &trans          &trans    /*& &*/ &trans         &trans           &trans
			>;
		};

		settings_layer {
			bindings = <
        &trans       &trans        &trans        &trans             &bt BT_CLR    /*& &*/     &trans              &trans           &trans         &trans        &trans
        &out OUT_USB &bt BT_SEL 2  &bt BT_SEL 1  &bt BT_SEL 0       &out OUT_BLE  /*& &*/     &trans              &trans           &trans         &trans        &trans
        &trans       &trans        &bt BT_SEL 4  &bt BT_SEL 3       &trans        /*& &*/     &trans              &trans           &trans         &trans        &trans
                                       &trans        &trans             &trans    /*& &*/ &trans         &trans           &trans
			>;
		};

    // This effectively acts as a template for new layers, but I leave it as part of the layout to make sure it can always compile.
		trans_layer {
			bindings = <
        &trans       &trans        &trans        &trans          &trans        /*& &*/     &trans              &trans           &trans         &trans        &trans
        &trans       &trans        &trans        &trans          &trans        /*& &*/     &trans              &trans           &trans         &trans        &trans
        &trans       &trans        &trans        &trans          &trans        /*& &*/     &trans              &trans           &trans         &trans        &trans
                                       &trans        &trans          &trans    /*& &*/ &trans         &trans           &trans
			>;
		};

	};
  //}}}

};
